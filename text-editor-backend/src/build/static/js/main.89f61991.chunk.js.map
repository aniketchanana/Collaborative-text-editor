{"version":3,"sources":["components/User.js","subscribetoserver.js","components/DisplayUsers.js","components/DisplayEditor.js","App.js","serviceWorker.js","index.js"],"names":["User","props","className","presenting","name","socket","opensocket","window","location","href","DisplayUsers","on","allusers","updateUserList","useState","userList","map","user","username","isPresenting","DisplayEditor","editorText","changeEditorText","lock","changeLock","value","cols","rows","disabled","onInput","event","target","emit","onFocus","onBlur","placeholder","App","prompt","subscribetoserver","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0XAkBeA,MAff,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,wBAAIA,UAAWD,EAAME,WAAW,aAAa,UAErCF,EAAME,WACNF,EAAMG,KAAO,gBACbH,EAAMG,Q,QCTpBC,E,MAASC,GAAW,GAAD,OAAIC,OAAOC,SAASC,KAApB,UC0BVC,MAtBf,SAAsBT,GAClBI,EAAOM,GAAG,eAAc,SAASC,GAC7BC,EAAeD,MAFM,MAISE,mBAAS,IAJlB,mBAIlBC,EAJkB,KAITF,EAJS,KAKzB,OACI,yBAAKX,UAAU,YACX,wBAAIA,UAAU,WAAd,gBACA,yBAAKA,UAAU,YAEPa,EAASC,KAAI,SAAAC,GACV,OAAO,kBAAC,EAAD,CACNb,KAAMa,EAAKC,SACXf,WAAYc,EAAKE,qB,MC2D1BC,MAzEf,SAAuBnB,GAAQ,IAAD,EACYa,mBAAS,IADrB,mBACnBO,EADmB,KACRC,EADQ,OAEAR,oBAAS,GAFT,mBAEnBS,EAFmB,KAEdC,EAFc,KAuB1B,OATAnB,EAAOM,GAAG,qBAAoB,SAACc,GAC3BH,EAAiBG,MAErBpB,EAAOM,GAAG,gBAAe,WACrBa,GAAW,MAEfnB,EAAOM,GAAG,cAAa,WACnBa,GAAW,MAGf,yBAAKtB,UAAU,mBACX,8BACIuB,MAAOJ,EACPK,KAAK,MACLC,KAAK,KACLC,SAAUL,EACVM,QArBR,SAAsBC,GAClBR,EAAiBQ,EAAMC,OAAON,OAC9BpB,EAAO2B,KAAK,oBAAoBF,EAAMC,OAAON,QAoBzCQ,QA5BR,WACI5B,EAAO2B,KAAK,UA4BRE,OA1BR,WACI7B,EAAO2B,KAAK,SA0BRG,YAAY,8BCbTC,MAlBf,WAEE,IADA,IAAIlB,EAAW,GACI,KAAbA,GACJA,EAAWX,OAAO8B,OAAO,0BAG3B,OHRF,SAA2BnB,GACvBb,EAAO2B,KAAK,aAAad,GGM3BoB,CAAkBpB,GAEhB,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,oBACb,kBAAC,EAAD,SCNYqC,QACW,cAA7BhC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.89f61991.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/User.css';\r\n\r\nfunction User(props) {\r\n    return (\r\n        <div className='user'>\r\n            <h2 className={props.presenting?'presenting':'normal'}>\r\n                {\r\n                    props.presenting ?\r\n                    props.name + ' (presenting)':\r\n                    props.name\r\n                }\r\n\r\n            </h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import opensocket from 'socket.io-client';\r\nconst socket = opensocket(`${window.location.href}:3000`);\r\n\r\n\r\nfunction subscribetoserver(username) {\r\n    socket.emit('addnewuser',username);\r\n}\r\n\r\n\r\nexport {subscribetoserver,socket};","import React,{useState} from 'react';\r\nimport './styles/DisplayUsers.css'\r\nimport User from './User';\r\nimport {socket} from '../subscribetoserver';\r\n\r\nfunction DisplayUsers(props) {\r\n    socket.on('activeusers',function(allusers) {\r\n        updateUserList(allusers);\r\n    })\r\n    const [userList,updateUserList] = useState([]);\r\n    return (\r\n        <div className='userArea'>\r\n            <h1 className='heading'>Active Users</h1>\r\n            <div className=\"userList\">\r\n                {\r\n                    userList.map(user => {\r\n                       return <User \r\n                        name={user.username} \r\n                        presenting={user.isPresenting}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayUsers;","import React, { useState } from 'react';\r\nimport './styles/DisplayEditor.css';\r\nimport {socket} from '../subscribetoserver';\r\n\r\nfunction DisplayEditor(props) {\r\n    const [editorText,changeEditorText] = useState('');\r\n    const [lock,changeLock] = useState(false);\r\n    function handelOnFocus() {\r\n        socket.emit('focus');\r\n    }\r\n    function handelOnBlur() {\r\n        socket.emit('blur');\r\n    }\r\n    function handelChange(event) {\r\n        changeEditorText(event.target.value);\r\n        socket.emit('editorvaluechange',event.target.value);\r\n    }\r\n\r\n    socket.on('editorvaluechange',(value)=>{\r\n        changeEditorText(value);\r\n    })\r\n    socket.on('unlockEditor',() => {\r\n        changeLock(false);\r\n    })\r\n    socket.on('lockEditor',() => {\r\n        changeLock(true);\r\n    })\r\n    return (\r\n    <div className='editorContainer'>\r\n        <textarea \r\n            value={editorText}\r\n            cols=\"100\" \r\n            rows=\"30\"\r\n            disabled={lock}\r\n            onInput={handelChange}\r\n            onFocus={handelOnFocus}\r\n            onBlur={handelOnBlur}\r\n            placeholder=\"write your text here...\"\r\n        >\r\n\r\n        </textarea>\r\n        {/* <ReactQuill\r\n        readOnly={lock}\r\n        theme=\"snow\"\r\n        modules={modules}\r\n        formats={formats}\r\n        value={editorHtml}\r\n        onChange={handelChange}\r\n        onFocus={handelOnFocus}\r\n        onBlur={handelOnBlur}\r\n        placeholder=\"write your text here...\"\r\n        /> */}\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n// var modules = {\r\n//     toolbar: [\r\n//       [{ 'header': '1'}, {'header': '2'}, { 'font': [] }],\r\n//       [{size: []}],\r\n//       ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n//       [{'list': 'ordered'}, {'list': 'bullet'}, \r\n//        {'indent': '-1'}, {'indent': '+1'}],\r\n//       ['link', 'image', 'video'],\r\n//       ['clean']\r\n//     ],\r\n//     clipboard: {\r\n//       matchVisual: false,\r\n//     }\r\n//   }\r\n//   var formats = [\r\n//     'header', 'font', 'size',\r\n//     'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n//     'list', 'bullet', 'indent',\r\n//     'link', 'image', 'video'\r\n//   ]\r\nexport default DisplayEditor;","import React from 'react';\nimport './App.css';\nimport DisplayUsers from './components/DisplayUsers';\nimport {subscribetoserver} from './subscribetoserver';\nimport DisplayEditor from './components/DisplayEditor';\n\nfunction App() {\n  let username = '';\n  while(username === '') {\n    username = window.prompt('please enter your name');\n  } \n  subscribetoserver(username);\n  return (\n    <div className=\"App\">\n      <div className=\"editorArea\">\n        <DisplayEditor/>\n      </div>\n      <div className=\"displayUsersArea\">\n        <DisplayUsers/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}